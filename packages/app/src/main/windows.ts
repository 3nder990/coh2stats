import { Unsubscribe } from '@reduxjs/toolkit';
import { app, BrowserWindow, ipcMain, Menu, session, shell, Tray } from 'electron';
import { isPackaged } from "electron-is-packaged";
import { ApplicationStore } from './electronStore';
import { getIconPath } from './paths';
//import { ExitApplication, isQuitting } from './tray';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MATCH_WINDOW_WEBPACK_ENTRY: string;
declare const MATCH_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


/*
interface WindowConfig {
  keepsApplicationAlive: boolean;
  windowOptions: Electron.BrowserWindowConstructorOptions;
  windowMenu: Electron.Menu;
  startURL: string;

}

let matchWindow: null | BrowserWindow = null;

export const openMatchWindow = () => {
  if (!matchWindow) {
    // create window if it doesnt exist
    matchWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 600,
      width: 800,
      webPreferences: {
        preload: MATCH_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
    });

    matchWindow.setMenu(Menu.buildFromTemplate([
      {
        label: '&Settings',
        click: () => {
          openSettingsWindow();
        }
      },
      {
        label: '&Exit',
        click: ExitApplication
      }
    ]));
    matchWindow.loadURL(MATCH_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      matchWindow.webContents.openDevTools();
    }
    matchWindow.on("close", (event)=> {
      if (!isQuitting()) {
        event.preventDefault();
        matchWindow.hide();
      }
    });
  } else {
    // focus window if it exists
    matchWindow.show();
    matchWindow.focus();
    //matchWindow.isVisible();
  }
}

let settingsWindow: null | BrowserWindow = null;

export const openSettingsWindow = () => {
  if (!settingsWindow) {
    // create window if it doesnt exist
    settingsWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 270,
      width: 580,
      webPreferences: {
        preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
    });

    settingsWindow.setMenu(Menu.buildFromTemplate([]));
    settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      settingsWindow.webContents.openDevTools();
    }
    settingsWindow.on("close", (event)=> {
      if (!isQuitting()) {
        event.preventDefault();
        settingsWindow.hide();
      }
    });
  } else {
    // focus window if it exists
    settingsWindow.show();
    settingsWindow.focus();
  }
}

let webWindow: null | BrowserWindow = null;

export const openWebWindow = (url: string) => {
  if (!webWindow) {
    // create window if it doesnt exist
    webWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 800,
      width: 1260
    });

    webWindow.setMenu(Menu.buildFromTemplate([]));
    webWindow.loadURL(url);
    webWindow.on("close", (event)=> {
      if (!isQuitting()) {
        event.preventDefault();
        webWindow.hide();
      }
    });
  } else {
    // focus window if it exists
    webWindow.show();
    webWindow.loadURL(url);
    webWindow.focus();
  }
}*/

export class ApplicationManager {
  applicationStore: ApplicationStore;
  matchWindow: BrowserWindow;
  settingsWindow: BrowserWindow;
  webWindow: BrowserWindow;
  tray: Tray;
  inTrayMode: boolean;
  isQuitting: boolean;
  unsubscriber: Unsubscribe;

  constructor(applicationStore: ApplicationStore) {
    this.isQuitting = false;
    this.applicationStore = applicationStore;
    const settings = this.applicationStore.getState().settings;
    // start windows in background
    this.matchWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 750,
      width: 1280,
      webPreferences: {
        preload: MATCH_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
    });
    this.matchWindow.hide();
    this.matchWindow.loadURL(MATCH_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      this.matchWindow.webContents.openDevTools();
    }
    this.matchWindow.setMenu(this.getMatchWindowMenu());
    this.matchWindow.on("close", this.matchWindowCloseHandler);
    // settings window
    this.settingsWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 450,
      width: 600,
      webPreferences: {
        preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
    });
    this.settingsWindow.hide();
    this.settingsWindow.setMenu(Menu.buildFromTemplate([]));
    this.settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      this.settingsWindow.webContents.openDevTools();
    }
    this.settingsWindow.on("close", (event: Electron.Event) => {
      if (!this.isQuitting) {
        event.preventDefault();
        this.settingsWindow.hide();
      }
    });
    // web window
    this.webWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 800,
      width: 1260
    });
    this.webWindow.hide();
    this.webWindow.setMenu(Menu.buildFromTemplate([]));
    this.webWindow.loadURL("https://coh2stats.com/leaderboards");
    this.webWindow.on("close", (event: Electron.Event) => {
      if (!this.isQuitting) {
        event.preventDefault();
        this.webWindow.hide();
      }
    });
    // launch tray if in tray mode
    if (settings.runInTray) {
      this.inTrayMode = true;
      this.createTray();
    } else {
      this.inTrayMode = false;
    }
    this.unsubscriber = this.applicationStore.runtimeStore.subscribe(this.runtimeStoreSubscriber);
    ipcMain.on('showProfile', (event, args) => {
      const profileURL = "https://coh2stats.com/players/" + args;
      if (this.applicationStore.getState().settings.openLinksInBrowser) {
        shell.openExternal(profileURL)
      } else {
        this.showWebWindow(profileURL);
      }
    });

    this.showMatchWindow();
    if (!settings.coh2LogFileFound) {
      this.showSettingsWindow();
    }
  }

  protected createTray = () => {
    this.tray = new Tray(getIconPath());
    const trayMenu = Menu.buildFromTemplate([
      {
        label: 'Settings',
        click: this.showSettingsWindow
      },
      {
        label: 'Exit',
        click: this.quit
      }
    ]);
    this.tray.on('click', () => {
      this.showMatchWindow();
    });
    this.tray.setToolTip('Tray Test');
    this.tray.setContextMenu(trayMenu);
    this.inTrayMode = true;
  }

  protected getMatchWindowMenu = () => {
    if (this.applicationStore.getState().settings.runInTray){
      return Menu.buildFromTemplate([
        {
          label: '&Settings',
          click: this.showSettingsWindow
        },
        {
          label: '&Exit',
          click: this.quit
        }
      ]);
    }
    return Menu.buildFromTemplate([
      {
        label: '&Settings',
        click: this.showSettingsWindow
      }
    ]);
  }

  protected matchWindowCloseHandler = (event: Electron.Event) => {
    if (this.applicationStore.getState().settings.runInTray) {
      if (!this.isQuitting) {
        event.preventDefault();
        this.matchWindow.hide();
      }
    } else {
      this.quit();
    }
  }

  protected runtimeStoreSubscriber = () => {
    // update setting changes
    const settings = this.applicationStore.getState().settings;
    if (settings.runInTray !== this.inTrayMode) {
      if (settings.runInTray) {
        this.inTrayMode = true;
        this.createTray();
      } else {
        this.inTrayMode = false;
        if (!this.matchWindow.isVisible()) {
          this.matchWindow.show();
        }
        this.tray.destroy();
      }
    }
  }

  showMatchWindow = () => {
    this.matchWindow.show();
    this.matchWindow.focus();
  }

  showSettingsWindow = () => {
    this.settingsWindow.show();
    this.settingsWindow.focus();
  }

  showWebWindow = (url: string) => {
    this.webWindow.loadURL(url);
    this.webWindow.show();
    this.webWindow.focus();
  }

  quit = () => {
    this.isQuitting = true;
    app.quit();
  }

  destroy() {
    this.unsubscriber();
  }
}
