import { Unsubscribe } from "@reduxjs/toolkit";
import { app, BrowserWindow, ipcMain, Menu, shell, Tray } from "electron";
import { isPackaged } from "electron-is-packaged";
import config from "./config";
import { ApplicationStore } from "./electronStore";
import { getIconPath } from "./paths";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MATCH_WINDOW_WEBPACK_ENTRY: string;
declare const MATCH_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class ApplicationManager {
  applicationStore: ApplicationStore;
  matchWindow: BrowserWindow;
  settingsWindow: BrowserWindow;
  webWindow: BrowserWindow;
  tray: Tray;
  inTrayMode: boolean;
  isQuitting: boolean;
  unsubscriber: Unsubscribe;

  constructor(applicationStore: ApplicationStore) {
    this.isQuitting = false;
    this.applicationStore = applicationStore;
    const settings = this.applicationStore.getState().settings;
    // start windows in background
    this.matchWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 750,
      width: 1280,
      webPreferences: {
        preload: MATCH_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });
    this.matchWindow.hide();
    this.matchWindow.loadURL(MATCH_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      this.matchWindow.webContents.openDevTools();
    }
    this.matchWindow.setMenu(this.getMatchWindowMenu());
    this.matchWindow.on("close", this.matchWindowCloseHandler);
    // settings window
    this.settingsWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 700,
      width: 700,
      webPreferences: {
        preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });
    this.settingsWindow.hide();
    this.settingsWindow.setMenu(Menu.buildFromTemplate([]));
    this.settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);
    if (!isPackaged) {
      this.settingsWindow.webContents.openDevTools();
    }
    this.settingsWindow.on("close", (event: Electron.Event) => {
      if (!this.isQuitting) {
        event.preventDefault();
        this.settingsWindow.hide();
      }
    });
    // web window
    this.webWindow = new BrowserWindow({
      icon: getIconPath(),
      height: 800,
      width: 1260,
    });
    this.webWindow.hide();
    this.webWindow.setMenu(Menu.buildFromTemplate([]));
    this.webWindow.loadURL("https://coh2stats.com/leaderboards");
    this.webWindow.on("close", (event: Electron.Event) => {
      if (!this.isQuitting) {
        event.preventDefault();
        this.webWindow.hide();
      }
    });
    // launch tray if in tray mode
    if (settings.runInTray) {
      this.inTrayMode = true;
      this.createTray();
    } else {
      this.inTrayMode = false;
    }
    this.unsubscriber = this.applicationStore.runtimeStore.subscribe(this.runtimeStoreSubscriber);
    ipcMain.on("showProfile", (event, args) => {
      const profileURL = "https://coh2stats.com/players/" + args;
      if (this.applicationStore.getState().settings.openLinksInBrowser) {
        shell.openExternal(profileURL);
      } else {
        this.showWebWindow(profileURL);
      }
    });

    this.showMatchWindow();
    if (!settings.coh2LogFileFound) {
      this.showSettingsWindow();
    }
  }

  protected createTray = (): void => {
    this.tray = new Tray(getIconPath());
    const trayMenu = Menu.buildFromTemplate([
      {
        label: "Settings",
        click: this.showSettingsWindow,
      },
      {
        label: "Exit",
        click: this.quit,
      },
    ]);
    this.tray.on("click", () => {
      this.showMatchWindow();
    });
    this.tray.setToolTip(config.applicationName);
    this.tray.setContextMenu(trayMenu);
    this.inTrayMode = true;
  };

  protected getMatchWindowMenu = (): Menu => {
    if (this.applicationStore.getState().settings.runInTray) {
      return Menu.buildFromTemplate([
        {
          label: "&Settings",
          click: this.showSettingsWindow,
        },
        {
          label: "&Exit",
          click: this.quit,
        },
      ]);
    }
    return Menu.buildFromTemplate([
      {
        label: "&Settings",
        click: this.showSettingsWindow,
      },
    ]);
  };

  protected matchWindowCloseHandler = (event: Electron.Event): void => {
    if (this.applicationStore.getState().settings.runInTray) {
      if (!this.isQuitting) {
        event.preventDefault();
        this.matchWindow.hide();
      }
    } else {
      this.quit();
    }
  };

  protected runtimeStoreSubscriber = (): void => {
    // update setting changes
    const settings = this.applicationStore.getState().settings;
    if (settings.runInTray !== this.inTrayMode) {
      if (settings.runInTray) {
        this.inTrayMode = true;
        this.createTray();
      } else {
        this.inTrayMode = false;
        if (!this.matchWindow.isVisible()) {
          this.matchWindow.show();
        }
        this.tray.destroy();
      }
    }
  };

  showMatchWindow = (): void => {
    this.matchWindow.show();
    this.matchWindow.focus();
  };

  showSettingsWindow = (): void => {
    this.settingsWindow.show();
    this.settingsWindow.focus();
  };

  showWebWindow = (url: string): void => {
    this.webWindow.loadURL(url);
    this.webWindow.show();
    this.webWindow.focus();
  };

  quit = (): void => {
    this.isQuitting = true;
    app.quit();
  };

  destroy(): void {
    this.unsubscriber();
  }
}
